// Основной класс для премиум навигации
class PremiumNavigation {
    constructor() {
        this.sections = document.querySelectorAll('section');
        this.navLinks = document.querySelectorAll('.nav-link');
        this.progressBar = this.createProgressBar();
        this.navDots = this.createNavDots();
        this.init();
    }

    createProgressBar() {
        const bar = document.createElement('div');
        bar.className = 'scroll-progress';
        document.body.appendChild(bar);
        return bar;
    }

    createNavDots() {
        if (window.innerWidth <= 768) return null;

        const container = document.createElement('div');
        container.className = 'nav-dots';
        
        this.sections.forEach((section, index) => {
            if (section.id === 'home') return;
            
            const dot = document.createElement('div');
            dot.className = 'nav-dot';
            dot.dataset.section = section.id;
            
            const sectionName = this.getSectionName(section.id);
            dot.setAttribute('data-section', sectionName);

            dot.addEventListener('click', () => {
                this.scrollToSection(section.id);
            });

            container.appendChild(dot);
        });

        document.body.appendChild(container);
        return container;
    }

    getSectionName(sectionId) {
        const names = {
            'about': 'О нас',
            'expertise': 'Экспертиза',
            'partners': 'Партнеры',
            'investment-focus': 'Инвестиции',
            'esg-calculator': 'ESG',
            'feedback': 'Контакты'
        };
        return names[sectionId] || sectionId;
    }

    scrollToSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            const headerHeight = document.getElementById('header').offsetHeight;
            const targetPosition = section.offsetTop - headerHeight;

            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        }
    }

    init() {
        window.addEventListener('scroll', this.throttle(this.updateProgress, 16));
        this.setupScrollSpy();
    }

    updateProgress = () => {
        const winHeight = window.innerHeight;
        const docHeight = document.documentElement.scrollHeight;
        const scrollTop = window.pageYOffset;
        const scrollPercent = (scrollTop / (docHeight - winHeight)) * 100;
        this.progressBar.style.width = scrollPercent + '%';
    }

    setupScrollSpy() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    this.setActiveLink(entry.target.id);
                    this.setActiveDot(entry.target.id);
                }
            });
        }, { 
            threshold: 0.3,
            rootMargin: '-20% 0px -20% 0px'
        });

        this.sections.forEach(section => observer.observe(section));
    }

    setActiveLink(sectionId) {
        this.navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${sectionId}`) {
                link.classList.add('active');
            }
        });
    }

    setActiveDot(sectionId) {
        if (!this.navDots) return;
        
        const dots = this.navDots.querySelectorAll('.nav-dot');
        dots.forEach(dot => {
            dot.classList.remove('active');
            if (dot.dataset.section === sectionId) {
                dot.classList.add('active');
            }
        });
    }

    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        }
    }
}

// Класс для интерактивных эффектов
class InteractiveEffects {
    constructor() {
        this.initHoverEffects();
        this.initCustomCursor();
        this.initMagneticButtons();
    }

    initHoverEffects() {
        // 3D эффект для карточек
        document.querySelectorAll('.expertise-card, .about-card').forEach(card => {
            card.addEventListener('mousemove', this.handleCardMove.bind(this));
            card.addEventListener('mouseleave', this.handleCardLeave.bind(this));
        });
    }

    handleCardMove(e) {
        if (window.innerWidth <= 768) return;
        
        const card = e.currentTarget;
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateY = (x - centerX) / 25;
        const rotateX = (centerY - y) / 25;
        
        card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.02, 1.02, 1.02)`;
    }

    handleCardLeave(e) {
        const card = e.currentTarget;
        card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale3d(1, 1, 1)';
    }

    initCustomCursor() {
        if (window.innerWidth <= 768) return;

        const cursor = document.createElement('div');
        cursor.className = 'custom-cursor';
        document.body.appendChild(cursor);

        document.addEventListener('mousemove', (e) => {
            cursor.style.left = e.clientX + 'px';
            cursor.style.top = e.clientY + 'px';
        });

        document.querySelectorAll('a, button, .expertise-card, .about-card').forEach(el => {
            el.addEventListener('mouseenter', () => {
                cursor.style.transform = 'scale(1.5)';
                cursor.style.background = 'rgba(212, 175, 55, 0.3)';
            });
            
            el.addEventListener('mouseleave', () => {
                cursor.style.transform = 'scale(1)';
                cursor.style.background = 'transparent';
            });
        });
    }

    initMagneticButtons() {
        document.querySelectorAll('.nav-link, .read-more').forEach(button => {
            button.addEventListener('mousemove', (e) => {
                if (window.innerWidth <= 768) return;
                
                const rect = button.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                const centerX = rect.width / 2;
                const centerY = rect.height / 2;
                
                const moveX = (x - centerX) * 0.1;
                const moveY = (y - centerY) * 0.1;
                
                button.style.transform = `translate(${moveX}px, ${moveY}px)`;
            });
            
            button.addEventListener('mouseleave', () => {
                button.style.transform = 'translate(0, 0)';
            });
        });
    }
}

// Класс для модальных окон
class PremiumModal {
    constructor() {
        this.modal = document.getElementById('popup-modal');
        this.init();
    }

    init() {
        this.setupKeyboardEvents();
        this.setupBackdropClose();
    }

    openPopup(expertise) {
        const data = expertiseData[expertise];
        if (!data) return;

        this.setContent(data);
        this.showModal();
        this.animateIn();
    }

    setContent(data) {
        document.getElementById('popup-title').textContent = data.title;
        document.getElementById('popup-details').innerHTML = data.content;
    }

    showModal() {
        this.modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Добавляем blur для фона
        document.querySelector('main').style.filter = 'blur(5px)';
    }

    animateIn() {
        anime({
            targets: this.modal.querySelector('.popup-content'),
            scale: [0.8, 1],
            opacity: [0, 1],
            duration: 400,
            easing: 'easeOutBack'
        });
    }

    closePopup() {
        anime({
            targets: this.modal.querySelector('.popup-content'),
            scale: 0.8,
            opacity: 0,
            duration: 300,
            easing: 'easeInBack',
            complete: () => {
                this.modal.style.display = 'none';
                document.body.style.overflow = '';
                document.querySelector('main').style.filter = 'none';
            }
        });
    }

    setupKeyboardEvents() {
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.modal.style.display === 'flex') {
                this.closePopup();
            }
        });
    }

    setupBackdropClose() {
        this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal) {
                this.closePopup();
            }
        });
    }
}

// Данные для экспертизы
const expertiseData = {
    ai: {
        title: "Искусственный интеллект и машинное обучение",
        content: `<p>Используем передовые алгоритмы AI и ML для автоматизированного анализа данных, включая обработку естественного языка, компьютерное зрение и предиктивную аналитику. Наши решения помогают выявлять скрытые закономерности и принимать более обоснованные решения.</p>`,
    },
    "big-data": {
        title: "Анализ больших данных",
        content: `<p>Обрабатываем миллионы ESG-документов в реальном времени, используя распределенные вычисления и облачные технологии. Наша инфраструктура позволяет анализировать структурированные и неструктурированные данные из различных источников для формирования целостной картины.</p>`,
    },
    risks: {
        title: "Оценка ESG-рисков",
        content: `<p>Применяем ML и big data для ESG-оценок, создавая многофакторные модели риска, учитывающие как традиционные финансовые показатели, так и нефинансовые метрики устойчивого развития. Наш подход позволяет выявлять скрытые риски и возможности.</p>`,
    },
    scaling: {
        title: "Масштабирование бизнеса",
        content: `<p>Разрабатываем стратегии устойчивого роста, основанные на глубоком анализе рынка и конкурентной среды. Наша команда помогает компаниям выйти на новые рынки, оптимизировать бизнес-процессы и внедрить инновационные технологии для обеспечения долгосрочного успеха.</p>`,
    },
    legal: {
        title: "Юридическое сопровождение",
        content: `<p>Защита прав инвесторов и сопровождение сделок на всех этапах, от структурирования до закрытия. Наши юристы специализируются на венчурных инвестициях, M&A, интеллектуальной собственности и международном праве, обеспечивая надежную правовую защиту ваших интересов.</p>`,
    },
    patents: {
        title: "Патентование",
        content: `<p>Комплексное патентное обеспечение и экспертиза, включая патентный поиск, подготовку и подачу заявок, защиту прав интеллектуальной собственности. Мы помогаем изобретателям и компаниям защитить свои инновации и максимизировать их коммерческую ценность.</p>`,
    },
};

// Данные для ESG-калькулятора
const ratingsData = {
    solidcore: {
        ratings: [
            ["Sustainalytics", "8.5"],
            ["Refinitiv", "92"],
            ["MSCI", "AA"],
            ["RAEX Europe", "A+"],
            ["NRA ESG", "A1.esg"],
            ["Средняя согласованность рейтингов", "7.50"],
            ["Соответствие ЦУР №7", "Высокие показатели"],
            ["Соответствие ЦУР №5", "Средние показатели"],
            ["Историческая динамика RAEX Europe", "+5%"],
            ["Историческая динамика MSCI", "-3%"],
            ["ESG-профиль (E)", "Отличное управление выбросами CO2"],
            ["ESG-профиль (S)", "Программы поддержки местных сообществ"],
            ["ESG-профиль (G)", "Недостаточная прозрачность управления рисками"],
        ],
        recommendations: [
            { title: "Оригинальность", text: "Проект демонстрирует высокую степень уникальности." },
            { title: "Новизна", text: "Проект подтверждает свою патентную чистоту." },
            { title: "Проработанность", text: "Проект требует более детального описания целей." },
            { title: "Эффективность", text: "Проект обладает высокой потенциальной доходностью." },
            { title: "Ресурсное обеспечение", text: "Проект требует дополнительного анализа потребностей." },
            { title: "Коммерциализируемость", text: "Проект требует доработки бизнес-модели." },
        ],
    },
};

// Глобальные переменные
let navigation, effects, modal;

// Основная инициализация
document.addEventListener("DOMContentLoaded", () => {
    // Анимация заголовка
    anime({
        targets: ".site-title",
        opacity: [0, 1],
        translateY: [50, 0],
        duration: 1500,
        easing: "easeOutExpo",
    });

    // Анимация подзаголовка
    anime({
        targets: ".hero-subtitle",
        opacity: [0, 1],
        translateY: [30, 0],
        duration: 1000,
        delay: 1000,
        easing: "easeOutExpo",
    });

    // Инициализация AOS
    AOS.init({
        duration: 800,
        easing: "ease",
        once: true,
        mirror: false,
        anchorPlacement: "top-bottom",
    });

    // Инициализация премиум систем
    navigation = new PremiumNavigation();
    effects = new InteractiveEffects();
    modal = new PremiumModal();

    // Установка текущего года
    document.getElementById("current-year").textContent = new Date().getFullYear();

    // Инициализация мобильных подсказок
    initMobileTooltips();

    // Инициализация частиц
    initParticles();
});

// Функция для переключения меню
function toggleMenu() {
    const menu = document.getElementById("nav-menu");
    menu.classList.toggle("active");
}

// Показ/скрытие контактов
function toggleContacts() {
    const contacts = document.getElementById("contacts");
    const button = document.getElementById("show-contacts-btn");

    if (contacts.style.display === "none" || contacts.style.display === "") {
        contacts.style.display = "block";
        contacts.style.opacity = "0";
        contacts.style.transition = "opacity 0.5s ease-in-out";

        setTimeout(() => {
            contacts.style.opacity = "1";
        }, 10);

        button.textContent = "Скрыть контакты";
    } else {
        contacts.style.opacity = "0";

        setTimeout(() => {
            contacts.style.display = "none";
        }, 500);

        button.textContent = "Показать контакты";
    }
}

// Инициализация мобильных подсказок
function initMobileTooltips() {
    if (window.innerWidth <= 768) {
        const aboutCards = document.querySelectorAll(".about-card");

        aboutCards.forEach((card) => {
            card.addEventListener("click", function (e) {
                this.classList.toggle("tooltip-active");

                aboutCards.forEach((otherCard) => {
                    if (otherCard !== this) {
                        otherCard.classList.remove("tooltip-active");
                    }
                });
            });
        });

        document.addEventListener("click", (e) => {
            if (!e.target.closest(".about-card")) {
                aboutCards.forEach((card) => {
                    card.classList.remove("tooltip-active");
                });
            }
        });
    }
}

// Функции для модальных окон (глобальные для обратной совместимости)
function openPopup(expertise) {
    modal.openPopup(expertise);
}

function closePopup() {
    modal.closePopup();
}

// ESG калькулятор
function toggleRatings() {
    const result = document.getElementById("result");
    const recommendations = document.getElementById("expert-recommendations");
    const button = document.getElementById("ratings-button");

    if (!result.classList.contains("active")) {
        loadRatings();
        result.classList.add("active");
        recommendations.classList.add("active");
        button.textContent = "СКРЫТЬ РЕЙТИНГИ";
    } else {
        result.classList.remove("active");
        recommendations.classList.remove("active");
        button.textContent = "ЗАГРУЗИТЬ РЕЙТИНГИ";
    }
}

function loadRatings() {
    const company = document.getElementById("company").value;
    const resultDiv = document.getElementById("result");
    const recommendationsDiv = document.getElementById("expert-recommendations");

    if (!ratingsData[company]) {
        resultDiv.innerHTML = "<p>Данные о компании не найдены.</p>";
        recommendationsDiv.innerHTML = "";
        return;
    }

    let tableHTML = `<table class="ratings-table"><thead><tr><th>Показатель</th><th>Оценка</th></tr></thead><tbody>`;
    ratingsData[company].ratings.forEach((row) => {
        tableHTML += `<tr><td>${row[0]}</td><td>${row[1]}</td></tr>`;
    });
    tableHTML += `</tbody></table>`;
    resultDiv.innerHTML = tableHTML;

    let recommendationsHTML = `<h3 class="recommendation-title">Экспертные рекомендации</h3><div class="recommendation-grid">`;
    ratingsData[company].recommendations.forEach((rec) => {
        recommendationsHTML += `<div class="recommendation-card"><h4>${rec.title}</h4><p>${rec.text}</p></div>`;
    });
    recommendationsHTML += `</div><button class="download-button" onclick="downloadExcel()"><i class="fas fa-download"></i> Скачать отчет</button>`;
    recommendationsDiv.innerHTML = recommendationsHTML;
}

function downloadExcel() {
    const company = document.getElementById("company").value;
    const data = ratingsData[company];

    if (!data) {
        alert("Данные о компании не найдены.");
        return;
    }

    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Показатель,Оценка\n";

    data.ratings.forEach((row) => {
        csvContent += `"${row[0]}","${row[1]}"\n`;
    });

    csvContent += "\nРекомендации\n";

    data.recommendations.forEach((rec) => {
        csvContent += `"${rec.title}","${rec.text}"\n`;
    });

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", `ESG_Report_${company}_${new Date().toISOString().split("T")[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// Плавная прокрутка
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            const headerHeight = document.getElementById('header').offsetHeight;
            const targetPosition = target.offsetTop - headerHeight;

            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });

            // Закрываем меню на мобильных устройствах
            if (window.innerWidth <= 768) {
                document.getElementById('nav-menu').classList.remove('active');
            }
        }
    });
});

// Изменение шапки при скролле
window.addEventListener('scroll', () => {
    const header = document.getElementById('header');
    if (window.scrollY > 50) {
        header.classList.add('scrolled');
    } else {
        header.classList.remove('scrolled');
    }
});

// Инициализация частиц
function initParticles() {
    if (typeof particlesJS !== 'undefined') {
        particlesJS('particles-js', {
            particles: {
                number: {
                    value: 60,
                    density: {
                        enable: true,
                        value_area: 800
                    }
                },
                color: {
                    value: '#d4af37'
                },
                shape: {
                    type: 'circle',
                },
                opacity: {
                    value: 0.4,
                    random: true,
                },
                size: {
                    value: 3,
                    random: true,
                },
                line_linked: {
                    enable: true,
                    distance: 150,
                    color: '#d4af37',
                    opacity: 0.2,
                    width: 1
                },
                move: {
                    enable: true,
                    speed: 1.5,
                    direction: 'none',
                    random: true,
                    straight: false,
                    out_mode: 'out',
                    bounce: false
                }
            },
            interactivity: {
                detect_on: 'canvas',
                events: {
                    onhover: {
                        enable: true,
                        mode: 'grab'
                    },
                    onclick: {
                        enable: true,
                        mode: 'push'
                    },
                    resize: true
                },
                modes: {
                    grab: {
                        distance: 140,
                        line_linked: {
                            opacity: 0.3
                        }
                    },
                    push: {
                        particles_nb: 3
                    }
                }
            },
            retina_detect: true
        });
    }
}

// Обработка формы обратной связи
document.getElementById('contact-form')?.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('.submit-btn');
    const originalText = submitBtn.innerHTML;
    
    // Имитация отправки
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Отправка...';
    submitBtn.disabled = true;
    
    setTimeout(() => {
        alert('Сообщение отправлено! Мы свяжемся с вами в ближайшее время.');
        this.reset();
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
    }, 2000);
});

// Адаптация к изменению размера окна
window.addEventListener('resize', () => {
    // Переинициализация мобильных подсказок при изменении размера
    initMobileTooltips();
});
